apiVersion: apps/v1beta2
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
    field.cattle.io/creatorId: user-hdtlw
  creationTimestamp: null
  generation: 1
  labels:
    workload.user.cattle.io/workloadselector: deployment-alphacar-thirdparty-services-ipfs-node
  name: ipfs-node
  selfLink: /apis/apps/v1beta2/namespaces/alphacar-thirdparty-services/deployments/ipfs-node
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      workload.user.cattle.io/workloadselector: deployment-alphacar-thirdparty-services-ipfs-node
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        field.cattle.io/ports: '[[{"containerPort":8080,"dnsName":"ipfs-node-nodeport","kind":"NodePort","name":"8080tcp320801","protocol":"TCP","sourcePort":32080}]]'
      creationTimestamp: null
      labels:
        workload.user.cattle.io/workloadselector: deployment-alphacar-thirdparty-services-ipfs-node
    spec:
      affinity: {}
      containers:
      - args:
        - /root/start.sh
        image: alphacar/ipfs_node
        imagePullPolicy: IfNotPresent
        name: ipfs-node
        ports:
        - containerPort: 8080
          name: 8080tcp320801
          protocol: TCP
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: false
          runAsNonRoot: false
        stdin: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        tty: true
        volumeMounts:
        - mountPath: /root/.ipfs
          name: vol1
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - hostPath:
          path: /data/ipfs
          type: ""
        name: vol1
status: {}
